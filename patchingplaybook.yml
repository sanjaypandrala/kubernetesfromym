---


### ansible playbook for patching all hosts
#
- hosts: all
  become_user: root
  serial: 2

  tasks:

    # purpose of this 
    #
    - name: verify application/database processis are not running
      shell: if ps -eaf | egrep 'apache|http' | grep -v grep > /dev/null ; then echo 'process_running'; else 'process_not_running';fi
      ignore_errors: true
      register: app_process_check

    # this task is decision to patch if app is not running if running display msg to stop app
    #
    - name: decision point to start patching
      fail: msg="{{ inventory_hostname }} have running application, please stop application first then attempt patching"
      when: app_process_check.stdout == "process_running"

    # this task will upgrade / install the rpm's if application is stopped
    #
    - name: upgrade all packages on the server
      yum:
       name="kernel"
       state=latest
      when: app_process_check.stdout == "process_not_running" and ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux"
      register: yum_update

      # this task is to check if kernel update happend and system needs reboot or not
      #
    - name: check if reboot required after kernel update.
      shell: KERNEL_NEW=$(rpm -q --last kernel | head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r ) ; if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo " reboot_not_needed";fi
      ignore_errors: true
      register: reboot_required

    # this task is to restart the system
    #
    - name: restart the system
      command: shutdown -r +1 "Rebooting System After Patching"
      async: 0
      poll: 0
      when: reboot_required.stdout == "reboot_needed"
      register: reboot_started
      ignore_errors: true
    
    # this task is to wait for 5 minutes for system to come up afer the reboot
    #
    - name: pause for 300 secs
      pause: 
       minutes: 3
    # this task is to confirm , system is up and responding to ssh
    #
    - name: check if system responding to ssh
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=15
          timeout=420
          state=started
      when: reboot_started|changed 
 

 
    
  




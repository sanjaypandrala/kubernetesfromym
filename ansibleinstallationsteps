# 

$ yum install ansible
$ echo "127.0.0.1" > ~/ansible_hosts
$ export ANSIBLE_INVENTORY=~/ansible_hosts
$ ansible all -m ping --ask-pass

### these are the declared ansible hosts in /etc/ansible/hosts
node1.example.com
node2.example.com
192.168.99.104
192.168.99.101


$ ansible-playbook -v apacheinst.yml -v --step 
$ ansible-playbook -v apacheinst.yml -v --step
$ ansible-playbook -v apacheinst.yml -v --syntax-check
$ ansible-playbook -v apacheinst.yml -v --check

$ ansible-playbook -v apacheinst.yml --tags stop

$ ansible-playbook -v apacheinst.yml --tags start

$ ansible-playbook assert

$ ansible-galaxy init apache --ofline
$ yum install tree
$ tree apache
### role should be in the roles folder
components of role
==================
files       static file to be pushed to the nodes are stored
defaults    data about the application or role default var are stored here
handlers    event handlers//tasks which are based on some actions (trigger) ex: in case my httpd.conf changes it should restart service
meta        role dependencies //information about the role things like author supported OS and dependencies
task        playbook tasks // actual action are stored here, core logic or code like installing pkgs cp files etc
templates   similar to files accept templates support modification dynamic files jinja2 - template language
vars        var definations // both vars and defaults store variables. variables stored under "vars" has got higher priority and diff to override 



$  ansible-vault create topsecret.yml
### enter vault password
$ ansible-vault edit topsecret.yml
$ ansible-vault decrypt topsecret.yml
$ ansible-vault encrypt topsecret.yml
$ ansible-vault encrypt topsecret.yml --ask-vault-pass 
$ ansible-doc -l 
$ ansible-doc -s yum
$ ansible all -m ping #   pings all servers
$ ansibel all -m ping -o # to display in single line
$ ansible all -m shell -a "uname -a; df -h"  
$ ansible all -m shell -a "uname -a; df -h" -v 
$ ansible node2.example.com -m yum -a "name=httpd state=present" 
$ ansible node2.example.com -m yum -a "name=httpd state=present"  -s ### to run as root on client
$ #### to give user root permission to a  user give visudo -f /etc/sudoers and enter  ALL=NOPASSWD: ALL
$ ansible node2.example.com -m service -a "name=httpd state=started" -s ### to start the service on remote machine as root 
$ ansible node2.example.com -m copy -a "src=/tmp/testfile dest=/tmp/testingfile" -s ### to copy from server to clientsmachine as root 
$ sestatus to chk selinux
$ ansible-playbook main.yml -i hosts
$ ansible-playbook playbookname.yml --list-tags  ### will list all tags
$ ansible -m setup all | grep ansible_distribution ### will give details of ansible distributions on all servers

$ ansibel all -m shell -a "uname -a ; uptime"  ### give kernel versions 

$ ansible all -m shell -a "ps -eaf | grep http" ### to check if app are running

$ ansible all -l node2.example.com -m shell -a "systemctl stop httpd.service"   ### will stop running apps 




